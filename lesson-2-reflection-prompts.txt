What happens when you initialize a repository? Why do you need to do it?

	Git creates a hidden .git/ folder that then tracks the file history of the repository 
	via commits. You need to do this because Git repositories are different than 
	regular repositories. 

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	
	The staging area is the temporary location where you store things from the 
	working directory before storing them in the repository. This means that, 
	when you make a commit, you don't have to add every single file from
	the working directory, only those that choose (i.e., those that have changed
	or correspond to a logical change)

How can you use the staging area to make sure you have one commit per logical
change?

	You use the staging area to choose which files to commit. Thus, you can use the
	staging area to add only the files that correspond to your logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be helpful when you want to make a different version of your
	code but still keep the original version intact. For example, creating a Spanish-language 
	version of your program, or creating an "easy-mode" version of a game. 

How do the diagrams help you visualize the branch structure?

	Diagrams display branches in a much more natural (i.e., visual) way than in the command 
	window. They also allow you to visualize the directionality of branches which isn't really 
	conveyed in the command window. 

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together (main + addition) merges the most recent commits of the 
	two branches and saves all commits from both branches in the log of the main branch. 
	This behavior is represented in the diagram. 

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
